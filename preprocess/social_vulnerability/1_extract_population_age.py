#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import json
import os

def extract_population_data():
    # File paths
    ods_path = "data/social_vulnerability/2025_population_of_discrict_by_age.ods"
    output_path = "data/social_vulnerability/processed/population_by_age_district.json"

    try:
        # Read ODS file
        print("Reading ODS file...")
        df = pd.read_excel(ods_path, engine='odf')

        print("File structure preview:")
        print(f"Shape: {df.shape}")

        # Get column headers from first row
        headers = df.iloc[0].tolist()
        print(f"Headers: {headers[:10]}...")  # Show first 10 headers

        # Use second row as the actual column names for ages
        df_clean = df.iloc[1:].reset_index(drop=True)

        # Create proper column names using first row values
        new_columns = ['區域別', '性別'] + headers[2:]  # Skip first two which are district and gender
        df_clean.columns = new_columns

        print("\nCleaned dataframe shape:", df_clean.shape)
        print("First few rows of cleaned data:")
        print(df_clean.head())

        # Initialize result dictionary
        result = {}

        # Define age groups for 10-year intervals
        age_groups = {
            '0-10歲': ['0歲', '1歲', '2歲', '3歲', '4歲', '5歲', '6歲', '7歲', '8歲', '9歲', '10歲'],
            '11-20歲': ['11歲', '12歲', '13歲', '14歲', '15歲', '16歲', '17歲', '18歲', '19歲', '20歲'],
            '21-30歲': ['21歲', '22歲', '23歲', '24歲', '25歲', '26歲', '27歲', '28歲', '29歲', '30歲'],
            '31-40歲': ['31歲', '32歲', '33歲', '34歲', '35歲', '36歲', '37歲', '38歲', '39歲', '40歲'],
            '41-50歲': ['41歲', '42歲', '43歲', '44歲', '45歲', '46歲', '47歲', '48歲', '49歲', '50歲'],
            '51-60歲': ['51歲', '52歲', '53歲', '54歲', '55歲', '56歲', '57歲', '58歲', '59歲', '60歲'],
            '61-70歲': ['61歲', '62歲', '63歲', '64歲', '65歲', '66歲', '67歲', '68歲', '69歲', '70歲'],
            '71-80歲': ['71歲', '72歲', '73歲', '74歲', '75歲', '76歲', '77歲', '78歲', '79歲', '80歲'],
            '81-90歲': ['81歲', '82歲', '83歲', '84歲', '85歲', '86歲', '87歲', '88歲', '89歲', '90歲'],
            '91歲以上': ['91歲', '92歲', '93歲', '94歲', '95歲', '96歲', '97歲', '98歲', '99歲', '100歲以上']
        }

        # Taipei districts
        taipei_districts = [
            '中正區', '大同區', '中山區', '松山區', '大安區', '萬華區',
            '信義區', '士林區', '北投區', '內湖區', '南港區', '文山區'
        ]

        print("\nProcessing data...")

        # Group data by district
        for district in taipei_districts:
            result[district] = {}

            # Find rows for this district (both male and female)
            district_rows = df_clean[df_clean['區域別'] == district]

            if len(district_rows) == 0:
                print(f"Warning: No data found for {district}")
                continue

            print(f"Processing {district}...")

            # For each age group, sum up the population from individual ages
            for age_group, individual_ages in age_groups.items():
                total_population = 0

                for age in individual_ages:
                    if age in df_clean.columns:
                        # Sum both male and female for this age
                        age_data = district_rows[age]
                        for value in age_data:
                            try:
                                if pd.notna(value) and str(value).strip() != '':
                                    total_population += int(float(str(value).replace(',', '')))
                            except (ValueError, TypeError):
                                continue

                result[district][age_group] = int(total_population/2)

            # Calculate 65歲以上 statistics for this district
            # First, calculate 65-70歲 population (part of 61-70歲 group)
            elderly_65_to_70 = 0
            ages_65_to_70 = ['65歲', '66歲', '67歲', '68歲', '69歲', '70歲']

            for age in ages_65_to_70:
                if age in df_clean.columns:
                    age_data = district_rows[age]
                    for value in age_data:
                        try:
                            if pd.notna(value) and str(value).strip() != '':
                                elderly_65_to_70 += int(float(str(value).replace(',', '')))
                        except (ValueError, TypeError):
                            continue

            elderly_65_to_70 = int(elderly_65_to_70/2)  # Divide by 2 for combined male/female

            # Add 71歲以上 population
            elderly_population_65_plus = (
                elderly_65_to_70 +
                result[district]['71-80歲'] +
                result[district]['81-90歲'] +
                result[district]['91歲以上']
            )

            total_district_population = sum(result[district].values())
            elderly_percentage_65_plus = (elderly_population_65_plus / total_district_population * 100) if total_district_population > 0 else 0

            # Add elderly statistics to result
            result[district]['65歲以上人數'] = elderly_population_65_plus
            result[district]['65歲以上比例'] = round(elderly_percentage_65_plus, 2)

        # Create output directory if it doesn't exist
        os.makedirs(os.path.dirname(output_path), exist_ok=True)

        # Save result to JSON
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)

        print(f"\nData processing completed!")
        print(f"Output file: {output_path}")
        print(f"Processed districts: {len(result)}")

        # Show sample data
        if result:
            sample_district = list(result.keys())[0]
            print(f"\nSample data ({sample_district}):")
            for key, value in result[sample_district].items():
                if isinstance(value, int):
                    print(f"  {key}: {value:,} 人")
                else:
                    print(f"  {key}: {value}%")

        # Calculate total population per district (excluding statistics)
        print(f"\nTotal population and elderly statistics by district:")
        for district, data in result.items():
            # Calculate total excluding the statistics fields
            age_groups_only = {k: v for k, v in data.items() if k not in ['65歲以上人數', '65歲以上比例']}
            total = sum(age_groups_only.values())
            elderly_count = data['65歲以上人數']
            elderly_percentage = data['65歲以上比例']
            print(f"  {district}: {total:,} 人 (65歲以上: {elderly_count:,} 人, {elderly_percentage}%)")

        return result

    except Exception as e:
        print(f"Error occurred: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    result = extract_population_data()
    if result:
        print("\nProcessing completed successfully!")
    else:
        print("\nProcessing failed!")